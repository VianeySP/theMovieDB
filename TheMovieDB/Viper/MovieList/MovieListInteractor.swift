//
//  MovieListInteractor.swift
//  TheMovieDB
//
//  Created by Sandy S√°nchez on 16/03/25.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation

final class MovieListInteractor {
}

// MARK: - Extensions -

extension MovieListInteractor: MovieListInteractorInterface {
    
    func getMovieList(completion: @escaping (Result<ListResponse, Error>) -> Void)   {
     
            let url = URL(string: "https://api.themoviedb.org/3/movie/top_rated")!
            var components = URLComponents(url: url, resolvingAgainstBaseURL: true)!
            let queryItems: [URLQueryItem] = [
              URLQueryItem(name: "language", value: "es-MX"),
              URLQueryItem(name: "page", value: "1"),
            ]
            components.queryItems = components.queryItems.map { $0 + queryItems } ?? queryItems

            var request = URLRequest(url: components.url!)
            request.httpMethod = "GET"
            request.timeoutInterval = 30
            request.allHTTPHeaderFields = [
              "accept": "application/json",
              "Authorization": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxMzQwZTY0MzhkY2MxM2UxNDIwNDFlY2ZmNWQ2NmVlMiIsIm5iZiI6MTc0MjE4NzM4NS44NTYsInN1YiI6IjY3ZDdhYjc5MzE2NzhjYzNmODAxOTA3MiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.HlYfj8ZjU70KDzXCByzeksAUK7fBioToth7_YPJ33pc"
            ]
            
           URLSession.shared.dataTask(with: request) { data, response, error in
                guard let data else {
                    completion(.failure(DataError.invalidData))
                    return
                }
                guard let response = response as? HTTPURLResponse, 200 ... 299  ~= response.statusCode else {
                    completion(.failure(DataError.invalidResponse))
                    return
                }
                
                do {
                    let movies = try JSONDecoder().decode(ListResponse.self, from: data)
                    completion(.success(movies))
                }
                catch {
                    completion(.failure(DataError.message(error)))
                }
            }.resume()
    }
}


enum DataError: Error {
    case invalidData
    case invalidResponse
    case message(_ error: Error?)
}
