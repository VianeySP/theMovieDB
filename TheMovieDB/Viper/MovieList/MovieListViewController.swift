//
//  MovieListViewController.swift
//  TheMovieDB
//
//  Created by Sandy Sánchez on 16/03/25.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//
import RealmSwift
import UIKit

final class MovieListViewController: UIViewController {

    // MARK: - Public properties -
    var presenter: MovieListPresenterInterface!
    
    @IBOutlet weak var searchBar: UISearchBar!
    @IBOutlet weak var movieTableView: UITableView!
    var movieList = [MovieInfo?]()
    var filteredList = [MovieInfo?]()
    var fullFilter = false
    var realmDataBase = RegistrationMovieRealm()
    // MARK: - Lifecycle -

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(false)
        movieList.removeAll()
        if CheckConection.connection() {
            presenter.executeGetMovieList()
        }else {
                for movieItem in self.realmDataBase.findMovieInfo("movieDB") {
                    let info = MovieInfo(id: Int(movieItem.id),
                                         original_title: movieItem.movieName,
                                         overview: movieItem.description,
                                         popularity: Double(movieItem.movieRatin),
                                         poster_path: "",
                                         release_date: movieItem.movieDate
                                  )
                    
                    self.movieList.append(info)
                }
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        movieTableView.delegate = self
        movieTableView.dataSource = self
        searchBar.delegate = self
        
        if let searchField = searchBar.value(forKey: "searchField") as? UITextField {
            if let glassIconView = searchField.leftView as? UIImageView {
                glassIconView.tintColor = #colorLiteral(red: 0.05098039216, green: 0.1450980392, blue: 0.2470588235, alpha: 1)
            }
        }
        
        if let textFieldInsideSearchBar = searchBar.value(forKey: "searchField") as? UITextField {
            if let clearButton = textFieldInsideSearchBar.value(forKey: "_clearButton") as? UIButton {
                clearButton.setImage(clearButton.currentImage?.withRenderingMode(.alwaysTemplate), for: .normal)
                clearButton.tintColor = #colorLiteral(red: 0.05098039216, green: 0.1450980392, blue: 0.2470588235, alpha: 1)
            }
        }
        searchBar.searchTextField.textColor = #colorLiteral(red: 0, green: 0, blue: 0, alpha: 1)
    }
    
    func initializeHideKeyboard() {
        let tap: UITapGestureRecognizer = UITapGestureRecognizer(target: self,
                                                                 action: #selector(dismissMyKeyboard))
        view.addGestureRecognizer(tap)
    }
    
    @objc func dismissMyKeyboard() {
        view.endEditing(true)
    }
    
    func createToolbar() {
        let bar = UIToolbar()
        let doneBtn = UIBarButtonItem(title: "Ok", style: .plain, target: self, action: #selector(dismissMyKeyboard))
        let flexSpace = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
        bar.items = [flexSpace, flexSpace, doneBtn]
        bar.sizeToFit()
        searchBar.searchTextField.inputAccessoryView = bar
    }
    
    
    @IBAction func logOutAction(_ sender: Any) {
        ATAlert.displayAlert(viewController: self,
                             title: "Cerrar sesión",
                              subtitle: "¿Está seguro que quiere salir de la aplicación?",
                             autoHide: false,
                             needConfirmation: true,
                             action: {
            
            SceneDelegate.navigationController?.dismiss(animated: true){}
                     SceneDelegate.navigationController?.pushViewController(LoginWireframe().viewController, animated: true)
            ATAlert.displayAlert(viewController: self,
                                 title: "Cerrar sesión",
                                  subtitle: "Su sesión ha finalizado",
                                 autoHide: false,
                                 needConfirmation: false, action:{} )
        })
    }
    
}

// MARK: - Extensions -
extension MovieListViewController: UISearchBarDelegate {
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        filteredList = []
        if searchText == "" {
            filteredList = movieList
        }
        
        for word in movieList {
            let wordLower = word?.original_title ?? "".lowercased()
                   let wordDiacrit = wordLower.folding(options: [.caseInsensitive, .diacriticInsensitive], locale: .current)
                   let searchTextLower = searchText.lowercased()
                   let searchTextDiacrit = searchTextLower.folding(options: [.caseInsensitive, .diacriticInsensitive], locale: .current)
                   if wordDiacrit.contains(searchTextDiacrit) {
                       filteredList.append(word)
                   }
        }
        movieTableView.reloadData()
    }
    
    func searchBarShouldBeginEditing(_ searchBar: UISearchBar) -> Bool {
        fullFilter = true
        return true
    }
    
    func searchBarShouldEndEditing(_ searchBar: UISearchBar) -> Bool {
        fullFilter = false
        return false
    }
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        searchBar.resignFirstResponder()
    }
}

extension MovieListViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if fullFilter {
            return filteredList.count
        }else {
            return movieList.isEmpty ? movieList.count : 10
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "MovieListTableViewCell") as! MovieListTableViewCell
        cell.cell = fullFilter ? filteredList[indexPath.row] : movieList[indexPath.row]
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        presenter.openMovieDetail(idMovie: fullFilter ? filteredList[indexPath.row]?.id ?? 0 : movieList[indexPath.row]?.id ?? 0 )
    }
}

extension MovieListViewController: MovieListViewInterface {
    func successGetMovieList(response: ListResponse) {
        DispatchQueue.main.async {
            _ = try! self.realmDataBase.deleteAllMovies()
            for movie in response.results {
                let record = self.realmDataBase.createNewMovie(app: "movieDB",
                                                          id: movie?.id ?? 0,
                                                          movieName: movie?.original_title ?? "",
                                                          movieRatin: String(movie?.popularity ?? 0.0),
                                                          movieDate: movie?.release_date ?? "",
                                                          movieDesc: movie?.overview ?? "")
                self.realmDataBase.saveMovie(record)
                self.movieList.append(movie)
            }
            self.movieTableView.reloadData()
        }
    }
    
    func failureGetMovieList(errorMessage: String) {
        ATAlert.displayAlert(viewController: self,
                             title: "Aviso",
                             subtitle: errorMessage,
                             autoHide: true,
                             needConfirmation: false,
                             action: {})
    }
}
